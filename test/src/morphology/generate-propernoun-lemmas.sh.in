#!/bin/bash
# @configure_input@

# Automake interprets the exit status as follows:
# - an exit status of 0 will denote a success
# - an exit status of 77 a skipped test
# - an exit status of 99 a hard error
# - any other exit status will denote a failure.

# To run this test script only, do:
#
# make check TESTS=generate-noun-lemmas.sh

# Dette skriptet tester at alle lemmaene i
# $GTHOME/langs/smj/src/morphology/stems/propernouns.lexc kan genereres.
# De som ikke kan genereres, kopieres til missingProperLemmas.*fst.txt

###### Variables: #######
POS=propernouns
### in ###
source_file=./../../../src/fst/generated_files/smi-smj-${POS}.lexc
generator_file=./../../../src/generator-gt-norm
analyser_file=./../../../src/analyser-gt-norm

### out ###
# Temporary files:
lemmas=./filtered-${POS}.txt
# Result files, will get filename suffix programmatically further down:
lemmas_attr=./filtered-attr-${POS}
generated_lemmas=./generated-${POS}
generated_attr_lemmas=./generated-attr-${POS}
result_file=missing_${POS}_lemmas
gen_result_file=generated_missing_${POS}_lemmas
ana_result_file=analysed_missing_${POS}_lemmas

# SKIP if source file does not exist (works with both single and
# multiple files):
if [ ! `ls -1 $source_file 2>/dev/null | wc -l ` -gt 0 ]; then
    echo
    echo "*** Warning: Source file(s) $source_file not found."
    echo
    exit 77
fi

# Use autotools mechanisms to only run the configured fst types in the tests:
fsttype=
@CAN_HFST_TRUE@fsttype="$fsttype hfst"
@CAN_XFST_TRUE@fsttype="$fsttype xfst"

# Exit if both hfst and xerox have been shut off:
if test -z "$fsttype" ; then
    echo "All transducer types have been shut off at configure time."
    echo "Nothing to test. Skipping."
    exit 77
fi

# Get external Mac editor for viewing failed results from configure:
EXTEDITOR=@SEE@

###### Extraction: #######
@GTCORE@/scripts/extract-lemmas.sh \
	--exclude "(FirstTag|Attr|Rreal | R |ShCmp|RCmpnd|CmpN/Only)" $source_file \
	> $lemmas.tmp
@GTCORE@/scripts/extract-lemmas.sh \
    --include "(Attr|-atr|FirstTag)" \
    $source_file > $lemmas_attr
sort -u $lemmas.tmp > $lemmas
rm -f $lemmas.tmp

@GTCORE@/scripts/extract-lemmas.sh \
	--include "(Attr)" $source_file \
	> $lemmas_attr

###### Start testing: #######
transducer_found=0
Fail=0

for f in $fsttype; do
    if [ $f == "xfst" ]; then
        lookup_tool="@LOOKUP@ -flags mbTT"
        suffix="xfst"
        # Does lookup support -q / quiet mode?
        lookup_quiet=$($lookup_tool -q 2>&1 | grep USAGES)
        if ! [[ $lookup_quiet == *"USAGES"* ]] ; then
            # it does support quiet mode, add the -q flag:
            lookup_tool="@LOOKUP@ -q -flags mbTT"
        fi
    elif [ $f == "hfst" ]; then
        lookup_tool="@HFST_OPTIMIZED_LOOKUP@ -q"
        suffix="hfstol"
    else
        Fail=1
        printf "ERROR: Unknown fst type! "
        echo "$f - FAIL"
        continue
    fi
    if [ -f "$generator_file.$suffix" ]; then
        let "transducer_found += 1"

###### Test non-comopunds: #######
        # generate propers in singular, extract the resulting generated lemma,
        # store it:
        sed 's/$/+N+Prop+Sg+Nom/' $lemmas \
			| $lookup_tool $generator_file.$suffix \
			| fgrep -v "+?" | grep -v "^$" | cut -f2 \
            > $generated_lemmas.$f.txt

        # Generate nouns, extract those that do not generate in singular,
        # and try to generate them in plural:
        sed 's/$/+N+Prop+Sg+Nom/' $lemmas \
			| $lookup_tool $generator_file.$suffix \
			| fgrep "+?" | cut -d "+" -f1 \
			| sed 's/$/+N+Prop+Pl+Nom/' \
			| $lookup_tool $generator_file.$suffix \
			| fgrep -v "+?" | grep -v "^$" | cut -f2 \
			>> $generated_lemmas.$f.txt

###### Test attr propers: #######
		sed 's/$/+N+Prop+Attr/' $lemmas_attr \
			| $lookup_tool $generator_file.$suffix | cut -f2 \
			| grep "N+" >> $result_file.$f.txt

###### Test attr propers: #######
		sed 's/$/+N+Prop+Attr/' $lemmas_attr \
			| $lookup_tool $generator_file.$suffix | cut -f2 \
			|  grep -v "N+" | grep -v "^$" \
			| sort -u > $generated_attr_lemmas.$f.txt

###### Collect results: #######
		sort -u -o $generated_lemmas.$f.txt $generated_lemmas.$f.txt
		comm -23 $lemmas $generated_lemmas.$f.txt > $result_file.$f.txt
		comm -23 $lemmas_attr $generated_attr_lemmas.$f.txt \
		         >> $result_file.$f.txt
		sort -u -o $result_file.$f.txt $result_file.$f.txt

		# if at least one word is found, the test failed, and the list of failed
		# lemmas is opened in SubEthaEdit:
		if [ -s $result_file.$f.txt ]; then
            # Formene generes med  +N+Prop+Sg+Nom for enklere debugging.
            grep -v '^$' $result_file.$f.txt \
              | sed 's/$/+N+Prop+Sg+Nom/' \
              | $lookup_tool $generator_file.$suffix \
              > $gen_result_file.$f.txt
            # If we have an analyser, analyse the missing lemmas as well:
            if test -e $analyser_file.$suffix ; then
                grep -v '^$' $result_file.$f.txt \
                  | $lookup_tool $analyser_file.$suffix \
                  > $ana_result_file.$f.txt
            fi
			# Only open the failed lemmas in see if @SEE@ is defined:
			if [ "$EXTEDITOR" ]; then
				$EXTEDITOR $result_file.$f.txt
                $EXTEDITOR $gen_result_file.$f.txt
                $EXTEDITOR $ana_result_file.$f.txt
            else
                echo "There where problem lemmas. Details in:"
                echo "* $result_file.$f.txt    "
                echo "* $gen_result_file.$f.txt"
                echo "* $ana_result_file.$f.txt"
			fi
		    Fail=1
		    echo "$f - FAIL"
		    continue
		fi
	    echo "$f - PASS"
	fi
done

# At least one of the Xerox or HFST tests failed:
if [ "$Fail" = "1" ]; then
	exit 1
fi

if [ $transducer_found -eq 0 ]; then
    echo No transducer found
    exit 1
fi

# When done, remove the generated data file:
rm -f $lemmas $lemmas_attr $generated_lemmas $generated_attr_lemmas
